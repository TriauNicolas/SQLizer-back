generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model databases_groups {
  id              String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String      @db.VarChar(255)
  workgroup_id    String      @db.Uuid
  delete_interval BigInt?
  databases       databases[]
  workgroups      workgroups  @relation(fields: [workgroup_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name       String             @db.VarChar(255)
  last_name        String             @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  password         String             @db.VarChar(255)
  image_url        String?            @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  users_workgroups users_workgroups[]
  workgroups       workgroups[]
}

model users_workgroups {
  user_id      String     @db.Uuid
  group_id     String     @db.Uuid
  create_right Boolean    @default(false)
  update_right Boolean    @default(false)
  delete_right Boolean    @default(false)
  workgroups   workgroups @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, group_id])
}

model workgroups {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  group_name       String             @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  creator_id       String             @db.Uuid
  private          Boolean            @default(false)
  databases_groups databases_groups[]
  users_workgroups users_workgroups[]
  users            users              @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model databases {
  id               String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String           @db.VarChar(255)
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  updated_at       DateTime?        @default(now()) @db.Timestamp(6)
  delete_interval  BigInt?
  delete_date      DateTime?        @db.Timestamp(6)
  structure        Json?
  is_public        Boolean          @default(false)
  group_id         String           @db.Uuid
  databases_groups databases_groups @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
